// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// User Management
model User {
  id           String   @id @default(cuid())
  username     String   @unique
  email        String   @unique
  passwordHash String
  firstName    String
  lastName     String
  role         UserRole @default(CASHIER)
  isActive     Boolean  @default(true)
  lastLogin    DateTime?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  sales               Sale[]
  inventoryAdjustments InventoryAdjustment[]
  createdProducts     Product[] @relation("ProductCreator")
  updatedProducts     Product[] @relation("ProductUpdater")
  createdCategories   Category[] @relation("CategoryCreator")
  updatedCategories   Category[] @relation("CategoryUpdater")

  @@map("users")
}

// Product Categories
model Category {
  id          String   @id @default(cuid())
  name        String
  description String?
  slug        String   @unique
  parentId    String?
  parent      Category? @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children    Category[] @relation("CategoryHierarchy")
  isActive    Boolean  @default(true)
  sortOrder   Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  products         Product[]
  createdBy        User     @relation("CategoryCreator", fields: [createdById], references: [id])
  createdById      String
  updatedBy        User     @relation("CategoryUpdater", fields: [updatedById], references: [id])
  updatedById      String

  @@map("categories")
}

// Products
model Product {
  id          String   @id @default(cuid())
  name        String
  description String?
  sku         String   @unique
  barcode     String?  @unique
  price       Float
  costPrice   Float
  comparePrice Float?
  weight      Float?
  dimensions  String? // "LxWxH" format
  isActive    Boolean  @default(true)
  isFeatured  Boolean  @default(false)
  tags        String   // JSON string of tags
  imageUrl    String?
  aiGeneratedImageUrl String?
  stockQuantity Int    @default(0)
  minStockLevel Int    @default(10)
  maxStockLevel Int?
  lowStockAlert Boolean @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  categoryId  String
  category    Category @relation(fields: [categoryId], references: [id])
  variants    Variant[]
  saleItems   SaleItem[]
  inventoryAdjustments InventoryAdjustment[]
  createdBy   User     @relation("ProductCreator", fields: [createdById], references: [id])
  createdById String
  updatedBy   User     @relation("ProductUpdater", fields: [updatedById], references: [id])
  updatedById String

  @@map("products")
}

// Product Variants
model Variant {
  id          String   @id @default(cuid())
  productId   String
  product     Product  @relation(fields: [productId], references: [id])
  sku         String   @unique
  name        String   // e.g., "Red Large"
  attributes  String   // JSON string of attributes like {"size": "L", "color": "red"}
  price       Float?
  costPrice   Float?
  stockQuantity Int    @default(0)
  minStockLevel Int    @default(5)
  maxStockLevel Int?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  saleItems   SaleItem[]
  inventoryAdjustments InventoryAdjustment[]

  @@map("variants")
}

// Inventory Management
model InventoryAdjustment {
  id              String   @id @default(cuid())
  productId       String?
  product         Product? @relation(fields: [productId], references: [id])
  variantId       String?
  variant         Variant? @relation(fields: [variantId], references: [id])
  quantityChange  Int      // Positive for additions, negative for reductions
  previousStock   Int
  newStock        Int
  reason          String   // "SALE", "PURCHASE", "ADJUSTMENT", "RETURN", "DAMAGED", "EXPIRED"
  notes           String?
  adjustmentDate  DateTime @default(now())
  createdAt       DateTime @default(now())

  // Relations
  adjustedBy      User     @relation(fields: [adjustedById], references: [id])
  adjustedById    String

  @@map("inventory_adjustments")
}

// Sales Management
model Sale {
  id            String   @id @default(cuid())
  invoiceNumber String   @unique
  customerId    String?
  customer      Customer? @relation(fields: [customerId], references: [id])
  userId        String
  user          User     @relation(fields: [userId], references: [id])
  subtotal      Float
  taxAmount     Float
  discountAmount Float   @default(0)
  totalAmount   Float
  paymentMethod PaymentMethod
  paymentStatus PaymentStatus @default(PENDING)
  saleStatus    SaleStatus @default(COMPLETED)
  notes         String?
  saleDate      DateTime @default(now())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  items         SaleItem[]
  loyaltyRewards LoyaltyReward[]

  @@map("sales")
}

// Sale Items
model SaleItem {
  id          String   @id @default(cuid())
  saleId      String
  sale        Sale     @relation(fields: [saleId], references: [id])
  productId   String?
  product     Product? @relation(fields: [productId], references: [id])
  variantId   String?
  variant     Variant? @relation(fields: [variantId], references: [id])
  quantity    Int
  unitPrice   Float
  totalPrice  Float
  discount    Float    @default(0)
  createdAt   DateTime @default(now())

  @@map("sale_items")
}

// Customer Management
model Customer {
  id            String   @id @default(cuid())
  name          String
  email         String?  @unique
  phone         String?
  address       String?
  city          String?
  state         String?
  zipCode       String?
  country       String?
  dateOfBirth   DateTime?
  loyaltyPoints Int      @default(0)
  totalSpent    Float    @default(0)
  isActive      Boolean  @default(true)
  notes         String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  sales         Sale[]
  loyaltyRewards LoyaltyReward[]

  @@map("customers")
}

// Loyalty Rewards
model LoyaltyReward {
  id          String   @id @default(cuid())
  customerId  String
  customer    Customer @relation(fields: [customerId], references: [id])
  saleId      String?
  sale        Sale?    @relation(fields: [saleId], references: [id])
  pointsUsed  Int
  rewardType  RewardType
  rewardValue Float
  description String
  isRedeemed  Boolean  @default(false)
  redeemedAt  DateTime?
  expiresAt   DateTime?
  createdAt   DateTime @default(now())

  @@map("loyalty_rewards")
}

// Enums
enum UserRole {
  ADMIN
  MANAGER
  CASHIER
}

enum PaymentMethod {
  CASH
  CARD
  BANK_TRANSFER
  MOBILE_MONEY
  CHECK
  GIFT_CARD
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
  PARTIALLY_REFUNDED
}

enum SaleStatus {
  PENDING
  COMPLETED
  CANCELLED
  REFUNDED
  PARTIALLY_REFUNDED
}

enum RewardType {
  DISCOUNT
  FREE_PRODUCT
  CASHBACK
  POINTS_MULTIPLIER
}
